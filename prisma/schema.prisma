// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  account    String     @unique
  username   String
  password   String
  role       Role       @default(GUEST)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  audits     Audit[]
  auditLogs  AuditLog[] @relation("auditLogs")
  reviewLogs AuditLog[] @relation("reviewLogs")
}

enum Role {
  USER
  ADMIN
  GUEST
}

model Audit {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  isActive    Boolean      @default(false)
  comment     String?
  createdById String       @db.ObjectId
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  auditGroups AuditGroup[]
  AuditLogs   AuditLog[]
}

model AuditLog {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  isLocked       Boolean         @default(false)
  description    String?
  userId         String          @db.ObjectId
  user           User            @relation("auditLogs", fields: [userId], references: [id], onDelete: Cascade)
  reviewerId     String?         @db.ObjectId
  reviewer       User?           @relation("reviewLogs", fields: [reviewerId], references: [id], onDelete: Cascade)
  auditId        String          @db.ObjectId
  audit          Audit           @relation(fields: [auditId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  auditGroupLogs AuditGroupLog[]
}

model AuditGroup {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  order          Int
  color          Color           @default(Default)
  auditId        String          @db.ObjectId
  audit          Audit           @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditItems     AuditItem[]
  auditGroupLogs AuditGroupLog[]
}

model AuditGroupLog {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  description   String?
  auditGroupId  String         @db.ObjectId
  auditGroup    AuditGroup     @relation(fields: [auditGroupId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogId    String         @db.ObjectId
  auditLog      AuditLog       @relation(fields: [auditLogId], references: [id], onDelete: Cascade)
  auditItemLogs AuditItemLog[]
}

model AuditItem {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  order        Int
  auditGroupId String         @db.ObjectId
  auditGroups  AuditGroup     @relation(fields: [auditGroupId], references: [id], onDelete: Cascade)
  auditLogs    AuditItemLog[]
}

model AuditItemLog {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  isChecked       Boolean       @default(false)
  auditItemId     String        @db.ObjectId
  auditItem       AuditItem     @relation(fields: [auditItemId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  auditGroupLogId String        @db.ObjectId
  auditGroupLog   AuditGroupLog @relation(fields: [auditGroupLogId], references: [id], onDelete: Cascade)
}

enum Color {
  Default
  Gray
  Orange
  Yellow
  Green
  Blue
  Purple
  Pink
  Red
}

model File {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  path     String
  filename String
  comment  String @default("")

  @@unique([path, filename])
}
