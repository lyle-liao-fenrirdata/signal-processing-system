// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  account   String     @unique
  username  String     @unique
  password  String
  role      Role       @default(GUEST)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  audits    Audit[]
  auditLogs AuditLog[]
}

enum Role {
  USER
  ADMIN
  GUEST
}

model Audit {
  id          Int          @id @default(autoincrement())
  isActive    Boolean      @default(false)
  comment     String?
  createdById Int
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  auditGroups AuditGroup[]
  AuditLogs   AuditLog[]
}

model AuditLog {
  id             Int             @id @default(autoincrement())
  isLocked       Boolean         @default(false)
  description    String?
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  auditId        Int
  audit          Audit           @relation(fields: [auditId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  auditGroupLogs AuditGroupLog[]
}

model AuditGroup {
  id             Int             @id @default(autoincrement())
  name           String
  order          Int             @default(autoincrement())
  color          Color           @default(Default)
  auditId        Int
  audit          Audit           @relation(fields: [auditId], references: [id])
  auditItems     AuditItem[]
  auditGroupLogs AuditGroupLog[]
}

model AuditGroupLog {
  id            Int            @id @default(autoincrement())
  description   String?
  auditGroupId  Int
  auditGroup    AuditGroup     @relation(fields: [auditGroupId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogId    Int
  auditLog      AuditLog       @relation(fields: [auditLogId], references: [id])
  auditItemLogs AuditItemLog[]
}

model AuditItem {
  id           Int            @id @default(autoincrement())
  name         String
  order        Int            @default(autoincrement())
  auditGroupId Int
  auditGroups  AuditGroup     @relation(fields: [auditGroupId], references: [id])
  auditLogs    AuditItemLog[]
}

model AuditItemLog {
  id              Int           @id @default(autoincrement())
  isChecked       Boolean       @default(false)
  auditItemId     Int
  auditItem       AuditItem     @relation(fields: [auditItemId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  auditGroupLogId Int
  auditGroupLog   AuditGroupLog @relation(fields: [auditGroupLogId], references: [id])
}

enum Color {
  Default
  Gray
  Orange
  Yellow
  Green
  Blue
  Purple
  Pink
  Red
}

// model Recording {
//   id Int @id @default(autoincrement())
// }

// model RecordingLinkId {
//   id           Int    @id @default(autoincrement())
//   SatelliteID  String
//   Polarization String
//   Frequency    BigInt
// }

// const JSON_format_from_Zack_in_Line_group = {
//     "InputPort": 1,
//     "OutputPort": 1,
//     "LinkID": {
//         "SatelliteID": "AA",
//         "Polarization": "V",
//         "Frequency": 12500250000
//     },
//     "ServerIP": "192.168.016.101",
//     "ServerPort": 1234,
//     "ServerCh": 1,
//     "ServerType": "HDLC/DVB/IP",
//     "Timestamp": UnixTime(seconds),
//     "Capture": "Enable/Disable"
//     "FileName": "CCV1250025000_YYYYMMDDHHmmssfff"
// }
