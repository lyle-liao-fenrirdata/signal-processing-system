// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  account   String     @unique
  username  String     @unique
  password  String
  role      Role       @default(GUEST)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  audits    Audit[]
  auditLogs AuditLog[]
}

enum Role {
  USER
  ADMIN
  GUEST
}

model Audit {
  id          Int          @id @default(autoincrement())
  isActive    Boolean      @default(false)
  createdById Int
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  auditGroup  AuditGroup[]
}

model AuditGroup {
  id        Int         @id @default(autoincrement())
  name      String
  order     Int         @default(autoincrement())
  color     Color       @default(Default)
  auditId   Int
  audit     Audit       @relation(fields: [auditId], references: [id])
  auditItem AuditItem[]
}

model AuditItem {
  id           Int        @id @default(autoincrement())
  name         String
  order        Int        @default(autoincrement())
  auditGroupId Int
  auditGroup   AuditGroup @relation(fields: [auditGroupId], references: [id])
  auditLogs    AuditLog[]
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  isLocked    Boolean   @default(false)
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  auditItemId Int
  auditItem   AuditItem @relation(fields: [auditItemId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Color {
  Default
  Gray
  Orange
  Yellow
  Green
  Blue
  Purple
  Pink
  Red
}

// model Recording {
//   id Int @id @default(autoincrement())
// }

// model RecordingLinkId {
//   id           Int    @id @default(autoincrement())
//   SatelliteID  String
//   Polarization String
//   Frequency    BigInt
// }

// const JSON_format_from_Zack_in_Line_group = {
//     "InputPort": 1,
//     "OutputPort": 1,
//     "LinkID": {
//         "SatelliteID": "AA",
//         "Polarization": "V",
//         "Frequency": 12500250000
//     },
//     "ServerIP": "192.168.016.101",
//     "ServerPort": 1234,
//     "ServerCh": 1,
//     "ServerType": "HDLC/DVB/IP",
//     "Timestamp": UnixTime(seconds),
//     "Capture": "Enable/Disable"
//     "FileName": "CCV1250025000_YYYYMMDDHHmmssfff"
// }
